on:
  workflow_call:
    inputs:
      deploy:
        required: true
        type: boolean
      environ:
        required: true
        type: string
      aws-ecr-repo:
        required: true
        type: string
      image-version:
        required: true
        type: string
      database_engine:
        required: true
        type: string
      database_name:
        required: true
        type: string
      database_port:
        required: true
        type: string
    secrets:
      snyk_token:
        required: true
      aws-ecr-registry:
        required: true
      aws-tekken7-oidc-role-arn:
        required: true
      aws-region:
        required: true
      test_reporter_id:
        required: true
      django_secret_key:
        required: true
      database_user:
        required: true
      database_host:
        required: true
      database_password:
        required: true

jobs:
  infra:
    needs: app
    runs-on: ubuntu-latest
    steps:
      - name: infra
        env:
          IMAGE_TAG: ${{ needs.app.outputs.image_tag }}
        run: echo "$IMAGE_TAG"
  app:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
    environment: ${{ inputs.environ }}
    # services:
    #   postgres:
    #     image: postgres
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: mysecretpassword
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    # env:
    #   DB_ENGINE: ${{ inputs.database_engine }}
    #   DB_NAME: ${{ inputs.database_name }}
    #   DB_PORT: ${{ inputs.database_port }}
    #   DB_USER: ${{ secrets.database_user }}
    #   DB_HOST: ${{ secrets.database_host }}
    #   DB_PASSWORD: ${{ secrets.database_password }}
    #   DJANGO_SECRET_KEY: ${{ secrets.django_secret_key }}

    steps:
      - uses: actions/checkout@v3

      - name:
        id: image_tag
        run: echo "tag=image:some_image" >> "$GITHUB_OUTPUT"
    
      # - name: Set Up Python Environment.
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: 3.8

      # - name: Install Tekken Dependencies.
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install coverage flake8
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Run Stylistic Checks
      #   run: if [ flake8 . --count --show-source --statistics ]; then echo 'looking stylish ðŸ˜Ž'; fi

      # - name: Run Database Migrations.
      #   run: python3 manage.py migrate

      # - name: Run Unit Tests and Generate Coverage report.
      #   run: |
      #     coverage run manage.py test
      #     coverage report
      #     coverage lcov

      - name: Build + Tag Tekken Image.
        id: image_build
        env: 
          IMAGE: ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }}
        run: |
          docker build -t $IMAGE -f Dockerfile.app .
          echo "image=$(docker images | tail -n +2 | head -n 1)"

      - name: echo output
        run: echo "${{ steps.image_build.outputs.image }}"

      # - name: Scan Tekken Image.
      #   uses: snyk/actions/docker@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.snyk_token }}
      #   with:
      #     image: ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }}
      #     args: --file=Dockerfile.app
      #   continue-on-error: true
      
      # - name: Assume TekkenOIDCRole.
      #   uses: aws-actions/configure-aws-credentials@v1.7.0
      #   with:
      #     role-to-assume: ${{ secrets.aws-tekken7-oidc-role-arn }}
      #     aws-region: ${{ secrets.aws-region }}

      # - name: Publish Coverage Report.
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.deploy == true
      #   uses: paambaati/codeclimate-action@v5.0.0
      #   env:
      #     CC_TEST_REPORTER_ID: ${{ secrets.test_reporter_id }}
      #   with:
      #     coverageLocations: ./coverage.lcov:lcov

      # - name: Publish Tekken Image.
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.deploy == true
      #   run: |
      #     aws ecr get-login-password --region ${{ secrets.aws-region }} | docker login --username AWS --password-stdin ${{ secrets.aws-ecr-registry }}
      #     docker push ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }}