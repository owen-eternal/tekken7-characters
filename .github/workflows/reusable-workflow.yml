on:
  workflow_call:
    inputs:
      deploy:
        required: true
        type: boolean
      environ:
        required: true
        type: string
      aws-ecr-repo:
        required: true
        type: string
      image-version:
        required: true
        type: string
    secrets:
      snyk_token:
        required: true
      aws-ecr-registry:
        required: true
      aws-tekken7-oidc-role-arn:
        required: true
      aws-region:
        required: true

jobs:
  CICD:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    environment: ${{ inputs.environ }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      
    - uses: actions/checkout@v3
  
    - name: Set Up Python Environment.
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Tekken Dependencies.
      run: |
        python -m pip install --upgrade pip
        pip install coverage flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Stylistic Checks
      run: if [ flake8 . --count --show-source --statistics ]; then echo 'looking stylish ðŸ˜Ž'; fi

    - name: Run Database Migrations.
      run: python3 manage.py migrate

    - name: Run Unit Tests
      run: |
        coverage run manage.py test
        coverage report

    - name: Build + Tag Tekken Image.
      run: docker build -t ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }} -f Dockerfile.app .

    - name: Scan Tekken Image.
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      with:
        image: ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }}
        args: --file=Dockerfile.app
      continue-on-error: true
    
    - name: Assume TekkenOIDCRole.
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ secrets.aws-tekken7-oidc-role-arn }}
        aws-region: ${{ secrets.aws-region }}

    - name: Publish Tekken Image.
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.deploy == true
      run: |
        aws ecr get-login-password --region ${{ secrets.aws-region }} | docker login --username AWS --password-stdin ${{ secrets.aws-ecr-registry }}
        docker push ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repo }}:${{ inputs.image-version }}