name: Tekken7-CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPO: ${{ github.repository }}
  IMAGE_VERSION: ${{ github.run_number }}
  REGION: ${{ secrets.AWS_REGION }}

jobs:
  buildTestPublish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      
    - uses: actions/checkout@v3
  
    - name: Set Up Python Environment.
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install application Dependencies.
      run: |
        python -m pip install --upgrade pip
        pip install coverage flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Stylistic Checks
      run: flake8 . --count --show-source --statistics
      continue-on-error: true

    - name: Run Database Migrations.
      run: python3 manage.py migrate

    - name: Run Unit Tests
      run: |
        coverage run manage.py test
        coverage report

    - name: Build + Tag Image.
      run: docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_VERSION }} -f Dockerfile.app .

    - name: Scan Docker Image with Snyk.
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      with:
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_VERSION }}
        args: --file=Dockerfile.app
      continue-on-error: true
    
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1.7.0
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.REGION }}

    # - name: Publish Docker Image.
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY}}
    #     docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_VERSION }}