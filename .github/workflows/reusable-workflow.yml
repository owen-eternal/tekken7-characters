name: Build, Test and Deploy Tekken7 API

on:
  workflow_call:
    inputs:
      aws-ecr-repository:
        required: true
        type: string
      environ:
        required: true
        type: string
      deploy:
        required: true
        type: boolean
      version_tag:
        required: true
        type: string
    secrets:
      snyk_token:
        required: true
      aws-ecr-registry:
        required: true

jobs:
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    environment: ${{ inputs.environ }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    # - name: Set up Python
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: ${{ matrix.python-version }}

    # - name: Install app dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install coverage flake8
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # - name: Lint with flake8
    #   run: if [ flake8 . --count --show-source --statistics ]; then echo 'looking stylish ðŸ˜Ž'; fi

    # - name: Run database migrations
    #   run: python3 manage.py migrate

    # - name: Run unit tests
    #   run: |
    #     coverage run manage.py test
    #     coverage report
    # - name: Generate Short Commit SHA.
    #   id: short_sha
    #   run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Build Tekken Image.
      run: docker build -t ${{ inputs.aws-ecr-repository}}:${{ inputs.version_tag }} -f Dockerfile.app .

    - name: Tag Tekken Image.
      run: docker tag ${{ inputs.aws-ecr-repository}}:${{ inputs.version_tag }} ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repository}}:${{ inputs.version_tag }}

    - name: Run Snyk to check Docker images for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      with:
        image: ${{ secrets.aws-ecr-registry }}/${{ inputs.aws-ecr-repository}}:${{ inputs.version_tag }}
        args: --file=Dockerfile.app
      continue-on-error: true